MAPE=eval2)
)
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
source('~/GitHub/TSPred/dev/5.1/tspred.r')
source('~/GitHub/TSPred/dev/5.1/modeling_subclasses.r')
source('~/GitHub/TSPred/dev/5.1/modeling.r')
source('~/GitHub/TSPred/dev/5.1/result.r')
source('~/GitHub/TSPred/dev/5.1/tspred.r')
#Obtaining objects of the modeling class
modl2 <- SVM(sw=proc4,proc=list(MM=proc5))
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2),
#WT=proc3),
modeling=modl2,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
View(obj)
names(obj$modeling)
data[m]
data[1]
length(data)
d <- data[1]
d <- data[m]
d <- NULL
d <- data[m]
d <- ifelse(length(data)>1,data[m],data[1])
if(length(data)>1) d<-data[m]
else d<-data[1])
if(length(data)>1) d<-data[m]
else d<-data[1]
if(length(data)>1) d<-data[m]
else d<-data[1]
if(length(data)>1) d<-data[m]
else{ d<-data[1]}
if(length(data)>1) d<-data[m]
else { d<-data[1]}
if(length(data)>1){ d<-data[m]}
else { d<-data[1]}
if(length(data)>1){
d<-data[m]
} else {
d<-data[1]
}
if(length(data)>1){
d<-data[m]
} else {
d<-data[1]
}
if(length(data)>1){
d<-data[m]
} else {
d<-NULL
}
d<-NULL
if(length(data)>1){
d<-data[m]
} else {
d<-NULL
}
if(length(data)>1){
d<-data[m]
} else {
d<-data[1]
}
if(length(data)>1){
d<-data[m]
} else {
d<-data[1]
}
source('~/GitHub/TSPred/dev/5.1/tspred.r')
source('~/GitHub/TSPred/dev/5.1/tspred.r')
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
source('~/GitHub/TSPred/dev/5.1/tspred.r')
#Obtaining objects of the modeling class
modl2 <- SVM(sw=proc4,proc=list(MM=proc5))
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2),
#WT=proc3),
modeling=modl2,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
source('~/GitHub/TSPred/dev/5.1/modeling_subclasses.r')
#Obtaining objects of the modeling class
modl2 <- SVM(sw=proc4,proc=list(MM=proc5))
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2),
#WT=proc3),
modeling=modl2,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
b <- benchmark(tspred_1_run,list(tspred_2_run),rank.by=c("MSE"))
View(b)
View(b[["rank"]])
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2,
WT=proc3),
modeling=modl2,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
b <- benchmark(tspred_1_run,list(tspred_2_run),rank.by=c("MSE"))
View(b)
View(b[["rank"]])
#Obtaining objects of the modeling class
modl2 <- Tensor_CNN(sw=proc4,proc=list(MM=proc5))
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2,
WT=proc3),
modeling=modl2,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
source('~/GitHub/TSPred/dev/5.1/modeling_subclasses.r')
#Obtaining objects of the modeling class
modl1 <- TF()
#Defining a time series prediction process
tspred_1 <- tspred(subsetting=proc1,
processing=list(BCT=proc2,
WT=proc3),
modeling=modl1,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
tspred_1_run <- workflow(tspred_1,data=data,prep_test=TRUE,onestep=TRUE)
#Defining a time series prediction process
tspred_1 <- tspred(subsetting=proc1,
processing=list(BCT=proc2),
#WT=proc3),
modeling=modl1,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
tspred_1_run <- workflow(tspred_1,data=data,prep_test=TRUE,onestep=TRUE)
#Defining a time series prediction process
tspred_1 <- tspred(subsetting=proc1,
processing=list(BCT=proc2,
WT=proc3),
modeling=modl1,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
tspred_1_run <- workflow(tspred_1,data=data,prep_test=TRUE,onestep=TRUE)
#Obtaining objects of the modeling class
modl1 <- TF()
#Defining a time series prediction process
tspred_1 <- tspred(subsetting=proc1,
processing=list(BCT=proc2,
WT=proc3),
modeling=modl1,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
tspred_1_run <- workflow(tspred_1,data=data,prep_test=TRUE,onestep=TRUE)
#Defining a time series prediction process
tspred_1 <- tspred(subsetting=proc1,
processing=list(BCT=proc2),
#WT=proc3),
modeling=modl1,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
tspred_1_run <- workflow(tspred_1,data=data,prep_test=TRUE,onestep=TRUE)
#Obtaining objects of the modeling class
modl1 <- ARIMA()
#Defining a time series prediction process
tspred_1 <- tspred(subsetting=proc1,
processing=list(BCT=proc2,
WT=proc3),
modeling=modl1,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
tspred_1_run <- workflow(tspred_1,data=data,prep_test=TRUE,onestep=TRUE)
tspred_2_run <- tspred_2 %>%
subset(data=data) %>%
preprocess(prep_test=TRUE) %>%
train()
tspred_2_run_train <- tspred_2 %>%
subset(data=data) %>%
preprocess(prep_test=TRUE) %>%
train()
source('~/GitHub/TSPred/dev/5.1/modeling_subclasses.r')
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
#Obtaining objects of the modeling class
modl2 <- Tensor_CNN(sw=proc4,proc=list(MM=proc5))
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2,
WT=proc3),
modeling=modl2,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2),
#WT=proc3),
modeling=modl2,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
#Obtaining objects of the modeling class
modl2 <- Tensor_CNN(sw=proc4,proc=list(MM=proc5))
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2),
#WT=proc3),
modeling=modl2,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
source('~/GitHub/TSPred/dev/5.1/modeling_subclasses.r')
#Obtaining objects of the modeling class
modl2 <- Tensor_CNN(sw=proc4,proc=list(MM=proc5))
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2),
#WT=proc3),
modeling=modl2,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
View(data)
class(data)
do.call(stats::predict,c(mdl, data.frame(data), list(...)))
class(model)
class(mdl)
do.call(stats::predict,c(mdl, data.frame(data), list(...)))
do.call(stats::predict,c(list(mdl), data.frame(data), list(...)))
do.call(stats::predict,c(list(mdl), list(data.frame(data)), list(...)))
do.call(stats::predict,c(list(mdl), list(data), list(...)))
do.call(stats::predict,c(list(mdl), list(data.frame(data)), list(...)))
source('~/GitHub/TSPred/dev/5.1/modeling_subclasses.r')
source('~/GitHub/TSPred/dev/5.1/modeling_subclasses.r')
#Obtaining objects of the modeling class
modl2 <- Tensor_LSTM(sw=proc4,proc=list(MM=proc5))
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2),
#WT=proc3),
modeling=modl2,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
library(TSPred)
data(CATS,CATS.cont)
data <- CATS[3]
#Obtaining objects of the processing class
proc1 <- subsetting(test_len=20)
proc2 <- BoxCoxT(lambda=NULL)
proc3 <- WT(level=1, filter="bl14")
#Obtaining objects of the modeling class
modl1 <- ARIMA()
#Obtaining objects of the evaluating class
eval1 <- MSE_eval()
eval2 <- MAPE_eval()
#Defining a time series prediction process
tspred_1 <- tspred(subsetting=proc1,
processing=list(BCT=proc2,
WT=proc3),
modeling=modl1,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
summary(tspred_1)
#Obtaining objects of the processing class
proc4 <- SW(window_len = 6)
proc5 <- MinMax()
#Obtaining objects of the modeling class
modl2 <- NNET(size=5,sw=proc4,proc=list(MM=proc5))
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2),
#WT=proc3),
modeling=modl2,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
summary(tspred_2)
tspred_1_run <- workflow(tspred_1,data=data,prep_test=TRUE,onestep=TRUE)
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
tspred_2_run_train <- tspred_2 %>%
subset(data=data) %>%
preprocess(prep_test=TRUE) %>%
train()
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
b <- benchmark(tspred_1_run,list(tspred_2_run),rank.by=c("MSE"))
View(b)
View(b[["rank"]])
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2,
WT=proc3),
modeling=modl2,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
b <- benchmark(tspred_1_run,list(tspred_2_run),rank.by=c("MSE"))
View(b)
View(b[["rank"]])
#Obtaining objects of the modeling class
modl2 <- SVM(size=5,sw=proc4,proc=list(MM=proc5))
#Obtaining objects of the modeling class
modl2 <- SVM(sw=proc4,proc=list(MM=proc5))
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2,
WT=proc3),
modeling=modl2,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
source('~/GitHub/TSPred/dev/5.1/tspred.r')
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2,
WT=proc3),
modeling=modl2,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
source('~/GitHub/TSPred/dev/5.1/tspred.r')
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
library(TSPred)
data(CATS,CATS.cont)
data <- CATS[3]
#Obtaining objects of the processing class
proc1 <- subsetting(test_len=20)
proc2 <- BoxCoxT(lambda=NULL)
proc3 <- WT(level=1, filter="bl14")
#Obtaining objects of the modeling class
modl1 <- ARIMA()
#Obtaining objects of the evaluating class
eval1 <- MSE_eval()
eval2 <- MAPE_eval()
#Defining a time series prediction process
tspred_1 <- tspred(subsetting=proc1,
processing=list(BCT=proc2,
WT=proc3),
modeling=modl1,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
#Obtaining objects of the processing class
proc4 <- SW(window_len = 6)
proc5 <- MinMax()
#Obtaining objects of the modeling class
modl2 <- SVM(sw=proc4,proc=list(MM=proc5))
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2,
WT=proc3),
modeling=modl2,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
tspred_1_run <- workflow(tspred_1,data=data,prep_test=TRUE,onestep=TRUE)
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
predict.tspred <- function(object,onestep=obj$one_step,...){
obj <- object
if(is.null(obj$modeling) || length(obj$modeling)==0){
warning("No predicting setup in the tspred object.")
return(obj)
}
if(!is.null(obj$data$prep$test) && length(obj$data$prep$test)>0) data <- obj$data$prep$test
else if(!is.null(obj$data$test)) data <- obj$data$test
else{
if(is.linear(obj$modeling[[1]]) && !onestep) data <- NULL
else stop("no input data was provided for prediction ('data$prep$test' and 'data$test are NULL')",call. = FALSE)
}
if(!is.null(obj$pred$raw)){
warning("Updating predicted data ('pred$raw') in the tspred object")
obj$pred$raw <- NULL
}
if(!is.logical(onestep)) stop("argument 'one_step' must be logical",call. = FALSE)
if(onestep != obj$one_step){
warning("Updating type of prediction ('onestep') in the tspred object")
obj$one_step <- onestep
}
cat("\nRunning prediction method...")
if(onestep) cat("\nType: 1-step-ahead prediction\n")
else cat("\nType: n-step-ahead prediction\n")
pred_prep <- list()
#browser()
for(m in names(obj$modeling)){
cat("\nPredicting data object",m,"...")
d_m <- ifelse(length(data)>1,m,1)
mdl_res <- stats::predict(obj$modeling[[m]], obj$model[[m]], data[d_m], obj$n.ahead, ..., onestep=onestep)
pred_prep[[m]] <- res(mdl_res)[[1]]
cat("\nSummary:\n")
summary(mdl_res)
cat("DONE!\n")
}
obj$pred$raw <- pred_prep
return(validate_tspred(obj))
}
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2,
WT=proc3),
modeling=modl2,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
View(predict.tspred)
tspred_2_run_train <- tspred_2 %>%
subset(data=data) %>%
preprocess(prep_test=TRUE) %>%
train()
tspred_2_run <-   tspred_2_run_train %>%
stats::predict(onestep=onestep)  %>%
postprocess() %>%
evaluate(fitness=eval_fitness)
tspred_2_run <-   tspred_2_run_train %>%
stats::predict(onestep=TRUE)  %>%
postprocess() %>%
evaluate(fitness=eval_fitness)
source('~/GitHub/TSPred/dev/5.1/modeling_subclasses.r')
#Obtaining objects of the modeling class
modl2 <- SVM(sw=proc4,proc=list(MM=proc5))
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2,
WT=proc3),
modeling=modl2,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
#Obtaining objects of the modeling class
modl2 <- SVM(sw=proc4,proc=list(MM=proc5))
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2),
#WT=proc3),
modeling=modl2,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
predict.tspred <- function(object,onestep=obj$one_step,...){
obj <- object
if(is.null(obj$modeling) || length(obj$modeling)==0){
warning("No predicting setup in the tspred object.")
return(obj)
}
if(!is.null(obj$data$prep$test) && length(obj$data$prep$test)>0) data <- obj$data$prep$test
else if(!is.null(obj$data$test)) data <- obj$data$test
else{
if(is.linear(obj$modeling[[1]]) && !onestep) data <- NULL
else stop("no input data was provided for prediction ('data$prep$test' and 'data$test are NULL')",call. = FALSE)
}
if(!is.null(obj$pred$raw)){
warning("Updating predicted data ('pred$raw') in the tspred object")
obj$pred$raw <- NULL
}
if(!is.logical(onestep)) stop("argument 'one_step' must be logical",call. = FALSE)
if(onestep != obj$one_step){
warning("Updating type of prediction ('onestep') in the tspred object")
obj$one_step <- onestep
}
cat("\nRunning prediction method...")
if(onestep) cat("\nType: 1-step-ahead prediction\n")
else cat("\nType: n-step-ahead prediction\n")
pred_prep <- list()
browser()
for(m in names(obj$modeling)){
cat("\nPredicting data object",m,"...")
d_m <- ifelse(length(data)>1,m,1)
mdl_res <- stats::predict(obj$modeling[[m]], obj$model[[m]], data[d_m], obj$n.ahead, ..., onestep=onestep)
pred_prep[[m]] <- res(mdl_res)[[1]]
cat("\nSummary:\n")
summary(mdl_res)
cat("DONE!\n")
}
obj$pred$raw <- pred_prep
return(validate_tspred(obj))
}
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
tspred_2_run_train <- tspred_2 %>%
subset(data=data) %>%
preprocess(prep_test=TRUE) %>%
train()
tspred_2_run <-   tspred_2_run_train %>%
stats::predict(onestep=TRUE)  %>%
postprocess() %>%
evaluate(fitness=eval_fitness)
data[d_m]
