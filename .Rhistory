library(forecast)
library(TSPred)
data("CATS")
m <- forecast::auto.arima(CATS[1])
stats::predict(m)
Sys.getenv("PATH")
Sys.getenv("PATH")
Sys.getenv("PATH")
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"C:\Program Files\MiKTeX\miktex\bin\x64",sep=";"))
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"C:/Program Files/MiKTeX/miktex/bin/x64",sep=";"))
Sys.getenv("PATH")
library(TSPred)
library(TSPred)
data(CATS,CATS.cont)
data <- CATS[3]
#Obtaining objects of the processing class
proc1 <- subsetting(test_len=20)
proc2 <- BoxCoxT(lambda=NULL)
proc3 <- WT(level=1, filter="bl14")
#Obtaining objects of the modeling class
modl1 <- ARIMA()
#Obtaining objects of the evaluating class
eval1 <- MSE_eval()
eval2 <- MAPE_eval()
#Defining a time series prediction process
tspred_1 <- tspred(subsetting=proc1,
processing=list(BCT=proc2,
WT=proc3),
modeling=modl1,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
#Obtaining objects of the processing class
proc4 <- SW(window_len = 6)
proc5 <- MinMax()
#Obtaining objects of the modeling class
modl2 <- SVM(sw=proc4,proc=list(MM=proc5))
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2),
#WT=proc3),
modeling=modl2,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2,
WT=proc3),
modeling=modl2,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
tspred_1_run <- workflow(tspred_1,data=data,prep_test=TRUE,onestep=TRUE)
b <- benchmark(tspred_1_run,list(tspred_2_run),rank.by=c("MSE"))
View(b)
View(b[["rank"]])
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2),
#WT=proc3),
modeling=modl2,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
b <- benchmark(tspred_1_run,list(tspred_2_run),rank.by=c("MSE"))
View(b)
View(b[["rank"]])
#Obtaining objects of the modeling class
modl2 <- Tensor_CNN(sw=proc4,proc=list(MM=proc5))
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2),
#WT=proc3),
modeling=modl2,
evaluating=list(MSE=eval1,
MAPE=eval2)
)
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
tspred_2_run_train <- tspred_2 %>%
subset(data=data) %>%
preprocess(prep_test=prep_test) %>%
train()
tspred_2_run_train <- tspred_2 %>%
subset(data=data) %>%
preprocess(prep_test=TRUE) %>%
train()
View(tspred_2_run_train)
class(tspred_2_run_train$model$V3)
fitted(tspred_2_run_train$model$V3)
View(tspred_2_run_train$model$V3)
evaluate(tspred_2_run_train$model$V3)
keras::evaluate(tspred_2_run_train$model$V3)
tspred_2_run <- tspred_2_run_train %>%
stats::predict(onestep=TRUE)  %>%
postprocess() #%>%
View(tspred_2_run)
tspred_2_run <- tspred_2_run_train %>%
stats::predict(onestep=TRUE)  %>%
postprocess() %>%
evaluate(fitness=FALSE)
View(tspred_2_run)
b <- benchmark(tspred_1_run,list(tspred_2_run),rank.by=c("MSE"))
View(b)
View(b[["rank"]])
AIC(tspred_2_run_train$model$V3)
eval3 <- AIC()
eval3 <- AIC()
#Defining a time series prediction process
tspred_1 <- tspred(subsetting=proc1,
processing=list(BCT=proc2,
WT=proc3),
modeling=modl1,
evaluating=list(MSE=eval1,
MAPE=eval2,
AIC=eval3)
)
eval3 <- AIC_eval()
#Defining a time series prediction process
tspred_1 <- tspred(subsetting=proc1,
processing=list(BCT=proc2,
WT=proc3),
modeling=modl1,
evaluating=list(MSE=eval1,
MAPE=eval2,
AIC=eval3)
)
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2),
#WT=proc3),
modeling=modl2,
evaluating=list(MSE=eval1,
MAPE=eval2,
AIC=eval3)
)
tspred_1_run <- workflow(tspred_1,data=data,prep_test=TRUE,onestep=TRUE)
View(tspred_1_run)
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2,
WT=proc3),
modeling=modl2,
evaluating=list(MSE=eval1,
MAPE=eval2,
AIC=eval3)
)
tspred_2_run <- workflow(tspred_2,data=data,prep_test=TRUE,onestep=TRUE)
tspred_2_run <- tspred_2_run_train %>%
stats::predict(onestep=TRUE)  %>%
postprocess() %>%
evaluate(fitness=FALSE)
View(tspred_2_run)
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2,
WT=proc3),
modeling=modl2,
evaluating=list(MSE=eval1,
MAPE=eval2,
AIC=eval3)
)
tspred_2_run_train <- tspred_2 %>%
subset(data=data) %>%
preprocess(prep_test=TRUE) %>%
train()
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2),
#WT=proc3),
modeling=modl2,
evaluating=list(MSE=eval1,
MAPE=eval2,
AIC=eval3)
)
tspred_2_run_train <- tspred_2 %>%
subset(data=data) %>%
preprocess(prep_test=TRUE) %>%
train()
tspred_2_run <- tspred_2_run_train %>%
stats::predict(onestep=TRUE)  %>%
postprocess() %>%
evaluate(fitness=FALSE)
View(tspred_2_run)
tspred_2_run <- tspred_2_run_train %>%
stats::predict(onestep=TRUE)  %>%
postprocess() %>%
evaluate(fitness=FALSE)
tspred_2_run <- tspred_2_run_train %>%
stats::predict(onestep=TRUE)  %>%
postprocess() %>%
evaluate(fitness=TRUE)
#Defining a time series prediction process
tspred_2 <- tspred(subsetting=proc1,
processing=list(BCT=proc2),
#WT=proc3),
modeling=modl2,
evaluating=list(#MSE=eval1,
#MAPE=eval2,
AIC=eval3)
)
tspred_2_run_train <- tspred_2 %>%
subset(data=data) %>%
preprocess(prep_test=TRUE) %>%
train()
tspred_2_run <- tspred_2_run_train %>%
stats::predict(onestep=TRUE)  %>%
postprocess() %>%
evaluate(fitness=TRUE)
tspred_2_run <- tspred_2_run_train %>%
stats::predict(onestep=TRUE)  %>%
postprocess() %>%
evaluate(fitness=FALSE)
